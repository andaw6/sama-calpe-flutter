import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:qr_code_scanner/qr_code_scanner.dart';
import 'package:permission_handler/permission_handler.dart';

class QRCodeScannerPage extends StatefulWidget {
  const QRCodeScannerPage({super.key});

  @override
  QRCodeScannerPageState createState() => QRCodeScannerPageState();
}

class QRCodeScannerPageState extends State<QRCodeScannerPage> with SingleTickerProviderStateMixin {
  final GlobalKey qrKey = GlobalKey(debugLabel: 'QR');
  QRViewController? controller;
  String result = "";
  bool isScanning = true;
  bool isFlashOn = false;
  late AnimationController _animationController;
  late Animation<double> _animation;

  // Définition des couleurs professionnelles
  static const Color primaryBlue = Color(0xFF2962FF);  // Bleu professionnel principal
  static const Color secondaryBlue = Color(0xFF2d71b5); // Bleu professionnel secondaire
  static const Color lightBlue = Color(0xFFe8f1f8);    // Bleu clair pour le fond
  static const Color accentBlue = Color(0xFF0a2d5c);   // Bleu foncé pour les accents

  @override
  void initState() {
    super.initState();
    _requestCameraPermission();
    _animationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    _animation = Tween<double>(begin: 0, end: 10).animate(_animationController);
  }

  Future<void> _requestCameraPermission() async {
    final status = await Permission.camera.request();
    if (status.isDenied) {
      if (mounted) {
        _showCustomSnackBar(
          'La permission de la caméra est nécessaire pour scanner',
          isError: true,
        );
      }
    }
  }

  void _showCustomSnackBar(String message, {bool isError = false}) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(
                isError ? Icons.error : Icons.info,
                color: Colors.white,
              ),
              const SizedBox(width: 8),
              Expanded(child: Text(message)),
            ],
          ),
          backgroundColor: isError ? Colors.red : primaryBlue,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Scanner le QR Code',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
            color: Colors.white
          ),
        ),
        backgroundColor: primaryBlue,
        elevation: 0,
        actions: [
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 8),
            decoration: BoxDecoration(
              color: isFlashOn ? secondaryBlue : Colors.transparent,
              borderRadius: BorderRadius.circular(8),
            ),
            child: IconButton(
              icon: Icon(
                isFlashOn ? Icons.flash_on : Icons.flash_off,
                color: Colors.white,
              ),
              onPressed: () {
                setState(() {
                  isFlashOn = !isFlashOn;
                  controller?.toggleFlash();
                });
              },
            ),
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [primaryBlue, primaryBlue, Colors.white],
            stops: [0, 0.2, 0.2],
          ),
        ),
        child: Column(
          children: <Widget>[
            Expanded(
              flex: 5,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  QRView(
                    key: qrKey,
                    onQRViewCreated: _onQRViewCreated,
                    overlay: QrScannerOverlayShape(
                      borderColor: secondaryBlue,
                      borderRadius: 20,
                      borderLength: 30,
                      borderWidth: 10,
                      cutOutSize: 300,
                    ),
                  ),
                  if (isScanning)
                    AnimatedBuilder(
                      animation: _animation,
                      builder: (context, child) {
                        return Container(
                          width: 310,
                          height: 310,
                          decoration: BoxDecoration(
                            border: Border.all(
                              color: secondaryBlue.withOpacity(0.5),
                              width: _animation.value,
                            ),
                            borderRadius: BorderRadius.circular(20),
                          ),
                        );
                      },
                    ),
                ],
              ),
            ),
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: lightBlue,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(30),
                  topRight: Radius.circular(30),
                ),
                boxShadow: [
                  BoxShadow(
                    color: accentBlue.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, -5),
                  ),
                ],
              ),
              child: Column(
                children: [
                  isScanning
                      ? const Column(
                    children: [
                      Icon(
                        Icons.qr_code_scanner,
                        size: 50,
                        color: primaryBlue,
                      ),
                       SizedBox(height: 10),
                      Text(
                        'Scannez un QR code',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: accentBlue,
                        ),
                      ),
                      SizedBox(height: 5),
                      Text(
                        'Placez le code QR dans le cadre pour scanner',
                        style: TextStyle(
                          color: Color(0xFF0a2d5c),
                          fontSize: 14,
                        ),
                      ),
                    ],
                  )
                      : Column(
                    children: [
                     const Icon(
                        Icons.check_circle,
                        size: 50,
                        color: secondaryBlue,
                      ),
                      const SizedBox(height: 10),
                      Text(
                        'Code scanné : $result',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: accentBlue,
                        ),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton.icon(
                        onPressed: () {
                          setState(() {
                            isScanning = true;
                            result = "";
                          });
                          controller?.resumeCamera();
                        },
                        icon: const Icon(Icons.refresh),
                        label: const Text(
                          'Scanner à nouveau',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: primaryBlue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 30,
                            vertical: 15,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30),
                          ),
                          elevation: 2,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _onQRViewCreated(QRViewController controller) {
    this.controller = controller;
    controller.scannedDataStream.listen((scanData) {
      setState(() {
        result = scanData.code!;
        isScanning = false;
      });
      controller.pauseCamera();
      _processTransaction(result);
    });
  }

  void _processTransaction(String qrData) {
    final logger = Logger();
    logger.i('Traitement de la transaction avec les données: $qrData');
  }

  @override
  void dispose() {
    _animationController.dispose();
    controller?.dispose();
    super.dispose();
  }
}